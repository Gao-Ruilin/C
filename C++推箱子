/*
	推箱子

	函数
		 返回类型  名字  （参数）
		 返回值类型  return
	数组（二维数组）
		int a,b,c;
		int  arr[3];	a[0]~[1]

		int b,p,n,f,h,i;
		int arr2D[2][3];		//arr2D[0][0]~arr2D[0][2]  arr2D[1][0]~arr2D[1][2]
*/
#include <stdio.h>
#include <stdlib.h>
#include <conio.h>

float fun()		//声明 +  实现
{
	printf("hello studens!\n");
	printf("hello studens!\n");
	printf("hello studens!\n");
	return 3.2f;
}


// C like    [0]  [1]  
//  增 删 改 查 排序      &&  || ！       DW  <div></div>
// 删除  伪删除  flag
//空地 0 墙壁 1 箱子3  目的地 4   人 5   箱子+目的地 7  人+目的地 9
int map[24][8] =
{
	1,1,1,1,1,1,1,1,
	1,0,1,1,0,4,1,1,
	0,4,0,0,0,3,0,1,
	0,3,0,0,0,0,0,1,
	1,0,0,5,0,0,1,1,
	1,1,0,0,0,1,1,1,
	1,1,1,0,0,0,0,0,
	1,1,1,1,1,1,1,1
};

void draw();		// 根据二维数组打印地图
void playGame();	// 玩游戏  需要进行按键监听

int main()			//推荐
{
	while (1)
	{
		draw();
		playGame();
		system("cls");		//界面刷新
	}
	return 0;
}

void draw()
{
	for (int i = 0; i < 8; i++)
	{
		for (int j = 0; j < 8; j++)
		{
			if (!map[i][j])
			{
				printf("  ");
			}
			else if (map[i][j] == 1)
			{
				printf("■");
			}
			else if (map[i][j] == 3)
			{
				printf("★");
			}
			else if (map[i][j] == 4)
			{
				printf("☆");
			}
			else if (map[i][j] == 5)
			{
				printf("♀");
			}
			else if (map[i][j] == 7)
			{
				printf("OK");
			}
			else if (map[i][j] == 9)
			{
				printf("♀");
			}
		}
		printf("\n");
	}
}
void playGame()
{
	//找人
	int i, j;
	for (i = 0; i < 8; i++)
	{
		for (j = 0; j < 8; j++)
		{
			if (map[i][j] == 5 || map[i][j] == 9)
			{
				break;
			}
		}
		if (map[i][j] == 5 || map[i][j] == 9)
		{
			break;
		}
	}

	//玩游戏  获取按键   scanf    getchar  getch   gets...  
	char ch = 0;
	ch = _getch();

	printf("%c ", ch);
	switch (ch)
	{
	case 'W':
	case 'w':
	case 72:
		if (map[i - 1][j] == 0 || map[i - 1][j] == 4)
		{
			map[i][j] -= 5;
			map[i - 1][j] += 5;
		}
		if (map[i - 1][j] == 3 || map[i - 1][j] == 7)
		{
			if (map[i - 2][j] == 0 || map[i - 2][j] == 4)
			{
				map[i][j] -= 5;
				map[i - 1][j] += 2;
				map[i - 2][j] += 3;
			}
		}
		break;
	case 'S':
	case 's':
	case 80:
		if (map[i + 1][j] == 0 || map[i + 1][j] == 4)
		{
			map[i][j] -= 5;
			map[i + 1][j] += 5;
		}
		if (map[i + 1][j] == 3 || map[i + 1][j] == 7)
		{
			if (map[i + 2][j] == 0 || map[i + 2][j] == 4)
			{
				map[i][j] -= 5;
				map[i + 1][j] += 2;
				map[i + 2][j] += 3;
			}
		}
		break;
	case 'A':
	case 'a':
	case 75:
		if (map[i][j - 1] == 0 || map[i][j - 1] == 4)
		{
			map[i][j] -= 5;
			map[i][j - 1] += 5;
		}
		if (map[i][j - 1] == 3 || map[i][j - 1] == 7)
		{
			if (map[i][j - 2] == 0 || map[i][j - 2] == 4)
			{
				map[i][j] -= 5;
				map[i][j - 1] += 2;
				map[i][j - 2] += 3;
			}
		}
		break;
	case 'D':
	case 'd':
	case 77:
		if (map[i][j + 1] == 0 || map[i][j + 1] == 4)
		{
			map[i][j] -= 5;
			map[i][j + 1] += 5;
		}
		if (map[i][j + 1] == 3 || map[i][j + 1] == 7)
		{
			if (map[i][j + 2] == 0 || map[i][j + 2] == 4)
			{
				map[i][j] -= 5;
				map[i][j + 1] += 2;
				map[i][j + 2] += 3;
			}
		}
		break;
	default:
		break;
	}
}

//void main()		//历史遗留
//{
//	printf("QAQ");
//
//	return;
//	printf("123");
//}

	//int arr[5][5] =
	//{
	//	1,1,1,1,1,
	//	1,0,0,0,1,
	//	1,1,0,1,1,
	//	1,0,0,0,1,
	//	1,1,1,1,1
	//};


	//for (int i=0;i<5;i++)
	//{
	//	for (int j=0;j<5;j++)
	//	{
	//		if (arr[i][j]==0)
	//		{
	//			printf("心");
	//		}
	//		else
	//		{
	//			printf("  ");
	//		}

	//	}
	//	printf("\n");
	//}
